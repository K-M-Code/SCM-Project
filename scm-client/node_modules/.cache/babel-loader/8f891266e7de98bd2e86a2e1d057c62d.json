{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport var focusStateInitializer = function focusStateInitializer(state) {\n  return _extends({}, state, {\n    focus: {\n      cell: null,\n      columnHeader: null\n    },\n    tabIndex: {\n      cell: null,\n      columnHeader: null\n    }\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport var useGridFocus = function useGridFocus(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridFocus');\n  var lastClickedCell = React.useRef(null);\n  var publishCellFocusOut = React.useCallback(function (cell, event) {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  var setCellFocus = React.useCallback(function (id, field) {\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on cell with id=\".concat(id, \" and field=\").concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id: id,\n            field: field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  var setColumnHeaderFocus = React.useCallback(function (field) {\n    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(function (state) {\n      logger.debug(\"Focusing on column header with colIndex=\".concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field: field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  var moveFocusToRelativeCell = React.useCallback(function (id, field, direction) {\n    var columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    var rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    var visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    var currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    var rowToFocus = currentPage.rows[rowIndexToFocus];\n    var colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    var columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  var handleCellDoubleClick = React.useCallback(function (_ref) {\n    var id = _ref.id,\n        field = _ref.field;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  var handleColumnHeaderFocus = React.useCallback(function (_ref2, event) {\n    var field = _ref2.field;\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  var handleBlur = React.useCallback(function () {\n    logger.debug(\"Clearing focus\");\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      });\n    });\n  }, [logger, apiRef]);\n  var handleCellMouseDown = React.useCallback(function (params) {\n    lastClickedCell.current = params;\n  }, []);\n  var handleDocumentClick = React.useCallback(function (event) {\n    var cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    var focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    var cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        });\n      });\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  var handleCellModeChange = React.useCallback(function (params) {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    var cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  var handleRowSet = React.useCallback(function () {\n    var cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        });\n      });\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus: setCellFocus,\n    setColumnHeaderFocus: setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(function () {\n    var doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return function () {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseDown","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","unstable_moveFocusToRelativeCell","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["F:/My Experiment/Software Engineering Methods/SCM Project - Self/scm-client/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}