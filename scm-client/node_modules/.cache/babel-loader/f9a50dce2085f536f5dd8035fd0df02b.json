{"ast":null,"code":"var _jsxFileName = \"F:\\\\My Experiment\\\\Software Engineering Methods\\\\SCM Project - Self\\\\scm-client\\\\src\\\\components\\\\TruckDatagridComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { getTruckData } from '../controllers/TruckController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'licencePlate',\n  headerName: 'License Plate',\n  width: 150,\n  editable: true\n}, {\n  field: 'name',\n  headerName: 'Name',\n  width: 150,\n  editable: true\n}];\n\nconst TruckDatagridComponent = props => {\n  _s();\n\n  const [truckArray, setTruckArray] = useState([]);\n\n  async function readTruckData() {\n    await getTruckData().catch(console.error).then(response => {\n      setTruckArray(response);\n      console.log(JSON.stringify(response));\n    });\n  }\n\n  useEffect(() => {\n    readTruckData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: truckArray,\n      columns: columns,\n      pageSize: 10,\n      rowsPerPageOptions: [10],\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      experimentalFeatures: {\n        newEditingApi: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TruckDatagridComponent, \"ti6atWoUUakqVI/L21PccoIRsco=\");\n\n_c = TruckDatagridComponent;\nexport default TruckDatagridComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TruckDatagridComponent\");","map":{"version":3,"names":["useState","useEffect","React","Box","DataGrid","getTruckData","columns","field","headerName","width","editable","TruckDatagridComponent","props","truckArray","setTruckArray","readTruckData","catch","console","error","then","response","log","JSON","stringify","height","newEditingApi"],"sources":["F:/My Experiment/Software Engineering Methods/SCM Project - Self/scm-client/src/components/TruckDatagridComponent.tsx"],"sourcesContent":["import {useState, useEffect, FC} from 'react';\r\nimport * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\nimport { Truck } from '../type/Truck';\r\nimport { getTruckData } from '../controllers/TruckController';\r\n\r\nconst columns: GridColDef[] = [\r\n  {\r\n    field: 'licencePlate',\r\n    headerName: 'License Plate',\r\n    width: 150,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    width: 150,\r\n    editable: true,\r\n  },\r\n];\r\n\r\n\r\nconst TruckDatagridComponent:FC=props=> {\r\n    const [truckArray, setTruckArray] = useState<Array<Truck>>([]);\r\n\r\n    async function readTruckData() {\r\n        await getTruckData()\r\n        .catch(console.error)\r\n        .then(response=>{\r\n            setTruckArray(response);\r\n            console.log(JSON.stringify(response));\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        readTruckData();\r\n    }, [])\r\n\r\n\r\n    return(\r\n        <Box sx={{ height: 400, width: '100%' }}>\r\n        <DataGrid\r\n          rows={truckArray}\r\n          columns={columns}\r\n          pageSize={10}\r\n          rowsPerPageOptions={[10]}\r\n          checkboxSelection\r\n          disableSelectionOnClick\r\n          experimentalFeatures={{ newEditingApi: true }}\r\n        />\r\n      </Box>\r\n    )\r\n}\r\n\r\nexport default TruckDatagridComponent;"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAsC,OAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,QAAT,QAA4D,kBAA5D;AAEA,SAASC,YAAT,QAA6B,gCAA7B;;AAEA,MAAMC,OAAqB,GAAG,CAC5B;EACEC,KAAK,EAAE,cADT;EAEEC,UAAU,EAAE,eAFd;EAGEC,KAAK,EAAE,GAHT;EAIEC,QAAQ,EAAE;AAJZ,CAD4B,EAO5B;EACEH,KAAK,EAAE,MADT;EAEEC,UAAU,EAAE,MAFd;EAGEC,KAAK,EAAE,GAHT;EAIEC,QAAQ,EAAE;AAJZ,CAP4B,CAA9B;;AAgBA,MAAMC,sBAAyB,GAACC,KAAK,IAAG;EAAA;;EACpC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAe,EAAf,CAA5C;;EAEA,eAAee,aAAf,GAA+B;IAC3B,MAAMV,YAAY,GACjBW,KADK,CACCC,OAAO,CAACC,KADT,EAELC,IAFK,CAEAC,QAAQ,IAAE;MACZN,aAAa,CAACM,QAAD,CAAb;MACAH,OAAO,CAACI,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAZ;IACH,CALK,CAAN;EAMH;;EAEDnB,SAAS,CAAC,MAAM;IACZc,aAAa;EAChB,CAFQ,EAEN,EAFM,CAAT;EAKA,oBACI,QAAC,GAAD;IAAK,EAAE,EAAE;MAAES,MAAM,EAAE,GAAV;MAAef,KAAK,EAAE;IAAtB,CAAT;IAAA,uBACA,QAAC,QAAD;MACE,IAAI,EAAEI,UADR;MAEE,OAAO,EAAEP,OAFX;MAGE,QAAQ,EAAE,EAHZ;MAIE,kBAAkB,EAAE,CAAC,EAAD,CAJtB;MAKE,iBAAiB,MALnB;MAME,uBAAuB,MANzB;MAOE,oBAAoB,EAAE;QAAEmB,aAAa,EAAE;MAAjB;IAPxB;MAAA;MAAA;MAAA;IAAA;EADA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH,CA9BD;;GAAMd,sB;;KAAAA,sB;AAgCN,eAAeA,sBAAf"},"metadata":{},"sourceType":"module"}