# FROM eclipse-temurin:17-jdk-jammy as builder
# WORKDIR /server
# COPY ./scm-server/.mvn .mvn
# COPY mvnw pom.xml ./
# RUN ./mvnw dependency:go-offline
# COPY ./src src
# RUN ./mvnw clean install
 
 
# FROM eclipse-temurin:17-jre-jammy
# WORKDIR /server
# EXPOSE 8080
# COPY --from=builder /server/target/*.jar /server/*.jar
# ENTRYPOINT ["java", "-jar", "/server/*.jar" ]


#### Stage 1: Build the application
# FROM openjdk:8-jdk-alpine as build

# # Set the current working directory inside the image
# WORKDIR /server

# # Copy maven executable to the image
# COPY mvnw .
# COPY .mvn .mvn

# # Copy the pom.xml file
# COPY pom.xml .

# # Build all the dependencies in preparation to go offline. 
# # This is a separate step so the dependencies will be cached unless 
# # the pom.xml file has changed.
# RUN ./mvnw dependency:go-offline -B

# # Copy the project source
# COPY src src

# # Package the application
# RUN ./mvnw package
# RUN mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

# #### Stage 2: A minimal docker image with command to run the app 
# FROM openjdk:8-jre-alpine

# ARG DEPENDENCY=/app/target/dependency

# # Copy project dependencies from the build stage
# COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib
# COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF
# COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app

# ENTRYPOINT ["java","-cp","app:app/lib/*","com.example.polls.PollsApplication"]


FROM eclipse-temurin:17-jre-jammy
WORKDIR /server
EXPOSE 8080
COPY ./target/*.jar /server/*.jar
ENTRYPOINT ["java", "-jar", "/server/*.jar" ]